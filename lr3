#include <mpi.h>
#include <iostream>
#include <fstream>
#include <string.h>
використання простору імен std;
Статус MPI_Status;
MPI_Request запит;
int arr [10] = {9, 8, 7, 6, 0, 4, 3, 2, 1, 0};
int msg [2];
int a [10];
int bf [4];
int * buf;
int t = 30;
порожнеча бульбашок (int * a, int n)
{
int i, j;
для (i = n - 1; i> = 0; i--)
{
для (j = 0; j <i; j ++)
{
if (a [j]> a [j + 1])
swap (a [j], a [j + 1]);
}
}
}
void p (int rank, int p1, int p2)
{
якщо (ранг == p2)
{
buf = new int [t + MPI_BSEND_OVERHEAD];
MPI_Buffer_attach (buf, t + MPI_BSEND_OVERHEAD);
10
MPI_Ibsend (msg, 2, MPI_INT, p1, 0, MPI_COMM_WORLD,
& запит);
MPI_Buffer_detach (& buf, & t);
MPI_Wait (& запит, & статус);
MPI_Irecv (msg, 2, MPI_INT, p1, 0, MPI_COMM_WORLD,
& запит);
MPI_Wait (& запит, & статус);
}
якщо (ранг == p1)
{
MPI_Irecv (bf, 2, MPI_INT, p2, 0, MPI_COMM_WORLD,
& запит);
MPI_Wait (& запит, & статус);
для (int i = 2; i <4; i ++)
{
bf [i] = msg [i - 2];
}
бульбашка (bf, 4);
for (int i = 0; i <2; i ++)
{
msg [i] = bf [i];
}
buf = new int [t + MPI_BSEND_OVERHEAD];
MPI_Buffer_attach (buf, t + MPI_BSEND_OVERHEAD);
MPI_Ibsend (bf + 2, 2, MPI_INT, p2, 0, MPI_COMM_WORLD,
& запит);
MPI_Buffer_detach (& buf, & t);
MPI_Wait (& запит, & статус);
}
}
int main (int argc, char * argv [])
{
інт ранг;
розмір int;
MPI_Init (& argc, & argv);
MPI_Comm_rank (MPI_COMM_WORLD, & rank);
MPI_Comm_size (MPI_COMM_WORLD, & розмір);
якщо (розмір == 5)
{
MPI_Scatter (arr, 2, MPI_INT, msg, 2, MPI_INT, 0,
MPI_COMM_WORLD);
p (ранг, 0, 1);
11
p (ранг, 0, 2);
p (ранг, 0, 3);
p (ранг, 0, 4);
p (звання, 1, 2);
р (звання, 1, 3);
p (ранг, 1, 4);
р (ранг, 2, 3);
р (ранг, 2, 4);
p (ранг, 3, 4);
MPI_Gather (msg, 2, MPI_INT, a, 2, MPI_INT, 0,
MPI_COMM_WORLD);
якщо (ранг == 0)
{
for (int i = 0; i <10; i ++)
{
cout << arr [i] << "";
}
cout << endl;
for (int i = 0; i <10; i ++)
{
cout << a [i] << "";
}
}
}
MPI_Finalize ();
повернути 0;
}
